import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import random
import hashlib
import numpy as np

# ุฅุนุฏุงุฏุงุช ุงูุตูุญุฉ
st.set_page_config(
    page_title="ุฅูุฌุงุฒุงุช ุฃุนุถุงุก ููุฆุฉ ุงูุชุฏุฑูุณ",
    page_icon="๐",
    layout="wide"
)

# CSS ูุฎุตุต ูุฏุนู ุงููุบุฉ ุงูุนุฑุจูุฉ ูุงูุชุฎุทูุท
st.markdown("""
<style>
    /* ุชุนุฏููุงุช ุนุงูุฉ ูุฏุนู RTL */
    .stApp {
        direction: rtl;
        text-align: right;
    }
    
    /* ุชุฑุชูุจ ุงูุนูุงููู ูู ุงููููู ูููุณุงุฑ */
    h1, h2, h3, h4, h5, h6 {
        text-align: right;
    }
    
    /* ุชุฑุชูุจ ุงูุฌุฏุงูู ูู ุงููููู ูููุณุงุฑ */
    .dataframe {
        text-align: right;
    }
    
    /* ูุญุงุฐุงุฉ ุงูุฃุฒุฑุงุฑ ูุงููุฏุฎูุงุช ูู ุงููููู */
    button, input, select, textarea, .stButton>button, .stTextInput>div>div>input {
        text-align: right;
    }
    
    /* ุชุนุฏูู ุงูููุงูุด ููุนูุงุตุฑ */
    .stMarkdown {
        text-align: right;
    }
    
    /* ุชุนุฏูู ูู ุงููุงุฆูุฉ ุงูุฌุงูุจูุฉ */
    .css-1inwz65 {
        text-align: right;
    }
    
    /* ุชุนุฏูู ุฎุงุต ูููุฎุทุทุงุช ุงูุจูุงููุฉ */
    .plotly {
        direction: ltr; /* ุงููุฎุทุทุงุช ุชุนูู ุจุดูู ุฃูุถู ูุน ุงุชุฌุงู ูู ุงููุณุงุฑ ูููููู */
    }
    
    /* ุจุทุงูุงุช ุงูุฅูุฌุงุฒุงุช */
    .achievement-card {
        background: linear-gradient(135deg, #f5f7fa 0%, #e3e6f0 100%);
        border-radius: 10px;
        padding: 15px;
        margin-bottom: 15px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }
    
    /* ุจุทุงูุงุช ุฃุนุถุงุก ููุฆุฉ ุงูุชุฏุฑูุณ ุงููููุฒูู */
    .top-faculty-card {
        padding: 15px;
        margin-bottom: 15px;
        border-radius: 10px;
        box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1);
    }
    
    /* ุฃููุงู ูุจุทุงูุงุช ุงููุณุชููุงุช ุงููุฎุชููุฉ */
    .level-1 {
        background: linear-gradient(135deg, #f7d6ff 0%, #9B59B6 100%);
        color: white;
    }
    
    .level-2 {
        background: linear-gradient(135deg, #fcf8e3 0%, #F1C40F 100%);
    }
    
    .level-3 {
        background: linear-gradient(135deg, #fef5ec 0%, #E67E22 100%);
    }
    
    .level-4 {
        background: linear-gradient(135deg, #e9f7fe 0%, #3498DB 100%);
    }
    
    .level-5 {
        background: linear-gradient(135deg, #ebf9f1 0%, #27AE60 100%);
    }
    
    /* ุญุงููุฉ ุงููููุฉ */
    .task-container {
        background-color: #f8f9fa;
        border-radius: 8px;
        padding: 15px;
        margin-bottom: 10px;
        border-right: 4px solid #1e88e5;
    }
    
    /* ุดุฑูุท ุชูุฏู ุชูููู ุงููููุฉ */
    .rating-bar {
        background-color: #e9ecef;
        border-radius: 5px;
        height: 15px;
        position: relative;
        margin-top: 5px;
    }
    
    .rating-fill {
        background-color: #1e88e5;
        height: 100%;
        border-radius: 5px;
    }
</style>
""", unsafe_allow_html=True)

# ---- ุฏูุงู ูุณุงุนุฏุฉ ----

@st.cache_data(ttl=3600)
def load_faculty_data():
    """ุชุญููู ุจูุงูุงุช ุฃุนุถุงุก ููุฆุฉ ุงูุชุฏุฑูุณ"""
    data = {
        "ุงูุงุณู": ["ุฏ. ูุญูุฏ ุฃุญูุฏ", "ุฏ. ุนุจุฏุงููู ูุญูุฏ", "ุฏ. ูุงุทูุฉ ุนูู", "ุฏ. ุฎุงูุฏ ุฅุจุฑุงููู", 
                  "ุฏ. ุนุงุฆุดุฉ ุณุนุฏ", "ุฏ. ุนูู ุญุณู", "ุฏ. ููุฑุฉ ุฎุงูุฏ", "ุฏ. ุณุงุฑุฉ ูุงุตุฑ",
                  "ุฏ. ุฃุญูุฏ ุนุจุฏุงููู", "ุฏ. ุนูุฑ ููุณู", "ุฏ. ูููู ุญุงูุฏ", "ุฏ. ุฒูุฏ ูุงุณุฑ"],
        "ุงูุฏุฑุฌุฉ ุงูุนูููุฉ": ["ุฃุณุชุงุฐ", "ุฃุณุชุงุฐ ูุดุงุฑู", "ุฃุณุชุงุฐ ูุณุงุนุฏ", "ุฃุณุชุงุฐ ูุณุงุนุฏ", 
                           "ุฃุณุชุงุฐ", "ุฃุณุชุงุฐ ูุดุงุฑู", "ุฃุณุชุงุฐ ูุณุงุนุฏ", "ูุญุงุถุฑ",
                           "ุฃุณุชุงุฐ ูุณุงุนุฏ", "ูุญุงุถุฑ", "ุฃุณุชุงุฐ ูุดุงุฑู", "ุฃุณุชุงุฐ"],
        "ุงูุจุฑูุงูุฌ": ["ุจูุงููุฑููุณ ูู ุงููุฑุขู ูุนูููู", "ุจูุงููุฑููุณ ุงููุฑุงุกุงุช", "ูุงุฌุณุชูุฑ ุงูุฏุฑุงุณุงุช ุงููุฑุขููุฉ ุงููุนุงุตุฑุฉ", "ูุงุฌุณุชูุฑ ุงููุฑุงุกุงุช", 
                     "ุฏูุชูุฑุงู ุนููู ุงููุฑุขู", "ุฏูุชูุฑุงู ุงููุฑุงุกุงุช", "ุจูุงููุฑููุณ ูู ุงููุฑุขู ูุนูููู", "ูุงุฌุณุชูุฑ ุงููุฑุงุกุงุช",
                     "ุจูุงููุฑููุณ ูู ุงููุฑุขู ูุนูููู", "ูุงุฌุณุชูุฑ ุงูุฏุฑุงุณุงุช ุงููุฑุขููุฉ ุงููุนุงุตุฑุฉ", "ุฏูุชูุฑุงู ุนููู ุงููุฑุขู", "ุฏูุชูุฑุงู ุงููุฑุงุกุงุช"]
    }
    return pd.DataFrame(data)

@st.cache_data(ttl=3600)
def generate_achievements_data():
    """ุชูููุฏ ุจูุงูุงุช ุงูุฅูุฌุงุฒุงุช - ูู ุงูุชุทุจูู ุงููุนููุ ุณุชุฃุชู ูู GitHub"""
    faculty_df = load_faculty_data()
    
    # ุฃููุงุน ุงูููุงู ุงููุชุงุญุฉ
    task_types = [
        "ูุดุฑ ุจุญุซ ุนููู", "ุชูุฏูู ูุญุงุถุฑุฉ", "ุฅุดุฑุงู ุนูู ุฑุณุงูุฉ", "ุชูุธูู ูุฑุดุฉ ุนูู", 
        "ุญุถูุฑ ูุคุชูุฑ", "ูุฑุงุฌุนุฉ ุฃุจุญุงุซ", "ุชุทููุฑ ููุฑุฑ", "ุงููุดุงุฑูุฉ ูู ูุฌูุฉ", 
        "ุชูุฏูู ุฏูุฑุฉ ุชุฏุฑูุจูุฉ", "ูุจุงุฏุฑุฉ ุฎุฏูุฉ ูุฌุชูุนูุฉ"
    ]
    
    # ูุงููุณ ููุฏู ููุงุท ูู ููุน ูููุฉ
    task_points_range = {
        "ูุดุฑ ุจุญุซ ุนููู": (30, 50),
        "ุชูุฏูู ูุญุงุถุฑุฉ": (10, 25),
        "ุฅุดุฑุงู ุนูู ุฑุณุงูุฉ": (20, 35),
        "ุชูุธูู ูุฑุดุฉ ุนูู": (15, 30),
        "ุญุถูุฑ ูุคุชูุฑ": (10, 20),
        "ูุฑุงุฌุนุฉ ุฃุจุญุงุซ": (5, 15),
        "ุชุทููุฑ ููุฑุฑ": (20, 40),
        "ุงููุดุงุฑูุฉ ูู ูุฌูุฉ": (10, 20),
        "ุชูุฏูู ุฏูุฑุฉ ุชุฏุฑูุจูุฉ": (15, 30),
        "ูุจุงุฏุฑุฉ ุฎุฏูุฉ ูุฌุชูุนูุฉ": (20, 40)
    }
    
    # ุชูููุฏ ุจูุงูุงุช ุงูุฅูุฌุงุฒุงุช
    achievements = []
    
    # ุงูุขู ูู 19 ุฃุจุฑูู 2025 ููุง ูู ูุฐููุฑ ูู ุงููุชุทูุจุงุช
    current_date = datetime(2025, 4, 19)
    
    # ุชูููุฏ 50 ุฅูุฌุงุฒ ูุฃุนุถุงุก ูุฎุชูููู
    for _ in range(100):
        # ุงุฎุชูุงุฑ ุนุถู ุนุดูุงุฆู
        faculty_idx = random.randint(0, len(faculty_df) - 1)
        faculty_name = faculty_df.iloc[faculty_idx]["ุงูุงุณู"]
        faculty_program = faculty_df.iloc[faculty_idx]["ุงูุจุฑูุงูุฌ"]
        
        # ุงุฎุชูุงุฑ ููุน ูููุฉ ุนุดูุงุฆู
        task_type = random.choice(task_types)
        
        # ุชูููุฏ ุชุงุฑูุฎ ุนุดูุงุฆู ูู ุขุฎุฑ 6 ุฃุดูุฑ
        days_back = random.randint(0, 180)
        task_date = current_date - timedelta(days=days_back)
        
        # ุชูููุฏ ููุงุท ุถูู ุงููุฏู ุงููุญุฏุฏ ูููููุฉ
        points_range = task_points_range[task_type]
        points = random.randint(points_range[0], points_range[1])
        
        # ุฅูุดุงุก ูุตู ูููุฉ ูููุฐุฌู
        descriptions = {
            "ูุดุฑ ุจุญุซ ุนููู": [
                f"ูุดุฑ ุจุญุซ ูู ูุฌูุฉ {random.choice(['ุงูุฏุฑุงุณุงุช ุงูุฅุณูุงููุฉ', 'ุงูุนููู ุงูุดุฑุนูุฉ', 'ุงูุฏุฑุงุณุงุช ุงููุฑุขููุฉ'])}",
                f"ูุดุฑ ูุฑูุฉ ุจุญุซูุฉ ูู ูุคุชูุฑ {random.choice(['ุงูุฏุฑุงุณุงุช ุงููุฑุขููุฉ ุงูุฏููู', 'ุนููู ุงููุฑุขู', 'ุงูุชูุณูุฑ ุงููุนุงุตุฑ'])}",
                f"ูุดุฑ ูุชุงุจ ุจุนููุงู 'ุฏุฑุงุณุงุช ูู {random.choice(['ุงูุชูุณูุฑ', 'ุงููุฑุงุกุงุช', 'ุนููู ุงููุฑุขู'])}'",
            ],
            "ุชูุฏูู ูุญุงุถุฑุฉ": [
                f"ุชูุฏูู ูุญุงุถุฑุฉ ุนุงูุฉ ุจุนููุงู '{random.choice(['ุฃุณุงููุจ ุงูุชุฏุจุฑ', 'ูููุฌูุงุช ุงูุชูุณูุฑ', 'ุงูุชุฌุฏูุฏ ูู ุงูุฏุฑุงุณุงุช ุงููุฑุขููุฉ'])}'",
                f"ุชูุฏูู ูุญุงุถุฑุฉ ูู ุจุฑูุงูุฌ {random.choice(['ุงูุซูุงูุฉ ุงููุฑุขููุฉ', 'ุงูุฃุณุจูุน ุงูุนููู', 'ุงูููุชูู ุงูุฃูุงุฏููู'])}",
            ],
            "ุฅุดุฑุงู ุนูู ุฑุณุงูุฉ": [
                f"ุงูุฅุดุฑุงู ุนูู ุฑุณุงูุฉ ูุงุฌุณุชูุฑ ุจุนููุงู '{random.choice(['ุฏุฑุงุณุฉ ูู...', 'ุชุญููู...', 'ูููุฌ...'])}'",
                f"ุงูุฅุดุฑุงู ุนูู ุฑุณุงูุฉ ุฏูุชูุฑุงู ูู ูุฌุงู {random.choice(['ุงูุชูุณูุฑ ุงูููุงุฑู', 'ุงูุฏุฑุงุณุงุช ุงููุฑุขููุฉ', 'ุงููุฑุงุกุงุช'])}",
            ],
        }
        
        # ุงุณุชุฎุฏุงู ูุตู ูุญุฏุฏ ูููููุฉ ุฅุฐุง ูุงู ูุชุงุญูุงุ ูุฅูุง ุงุณุชุฎุฏุงู ุงูููุน ููุตู
        if task_type in descriptions:
            description = random.choice(descriptions[task_type])
        else:
            description = f"{task_type} ูู ูุฌุงู {random.choice(['ุงูุชูุณูุฑ', 'ุงููุฑุงุกุงุช', 'ุนููู ุงููุฑุขู'])}"
        
        # ุชูููุฏ ูุนุฏู ุชูููู (1-5) ูุน ุชุฑุฌูุญ ูุญู ุงูุชููููุงุช ุงูุฃุนูู
        rating_weights = [0.05, 0.1, 0.15, 0.3, 0.4]  # ุฃูุฒุงู ููุชููููุงุช ูู 1 ุฅูู 5
        rating = random.choices([1, 2, 3, 4, 5], weights=rating_weights)[0]
        
        # ุฅุถุงูุฉ ุงููููุฉ ุฅูู ูุงุฆูุฉ ุงูุฅูุฌุงุฒุงุช
        achievements.append({
            "ุงูุนุถู": faculty_name,
            "ุงูุจุฑูุงูุฌ": faculty_program,
            "ููุน ุงููููุฉ": task_type,
            "ุงููุตู": description,
            "ุงูุชุงุฑูุฎ": task_date.strftime("%Y-%m-%d"),
            "ุงูููุงุท": points,
            "ุงูุชูููู": rating
        })
    
    # ุชุฑุชูุจ ุงูุฅูุฌุงุฒุงุช ุญุณุจ ุงูุชุงุฑูุฎ (ุงูุฃุญุฏุซ ุฃูููุง)
    achievements_df = pd.DataFrame(achievements)
    achievements_df = achievements_df.sort_values(by="ุงูุชุงุฑูุฎ", ascending=False)
    
    return achievements_df

@st.cache_data(ttl=3600)
def get_available_tasks():
    """ุงูุญุตูู ุนูู ูุงุฆูุฉ ุงูููุงู ุงููุชุงุญุฉ"""
    tasks = [
        {
            "ุงุณู ุงููููุฉ": "ูุดุฑ ุจุญุซ ูู ูุฌูุฉ ูุญููุฉ",
            "ุงููุตู": "ูุดุฑ ุจุญุซ ุนููู ูู ูุฌูุฉ ูุญููุฉ ูู ูุฌุงู ุงูุชุฎุตุต",
            "ูุทุงู ุงูููุงุท": (30, 50),
            "ุงููุชุทูุจุงุช": "ุฑุงุจุท ุงูุจุญุซ ุฃู ุตูุฑุฉ ูู ุงููุจูู",
            "ุงูุชุตููู": "ุจุญุซ ุนููู"
        },
        {
            "ุงุณู ุงููููุฉ": "ูุดุฑ ุจุญุซ ูู ูุคุชูุฑ",
            "ุงููุตู": "ูุดุฑ ูุฑูุฉ ุจุญุซูุฉ ูู ูุคุชูุฑ ุนููู ูุญูู ุฃู ุฏููู",
            "ูุทุงู ุงูููุงุท": (20, 40),
            "ุงููุชุทูุจุงุช": "ุดูุงุฏุฉ ุงููุดุงุฑูุฉ ุฃู ูุจูู ุงููุฑูุฉ",
            "ุงูุชุตููู": "ุจุญุซ ุนููู"
        },
        {
            "ุงุณู ุงููููุฉ": "ุชุฃููู ูุชุงุจ",
            "ุงููุตู": "ุชุฃููู ูุชุงุจ ููุดูุฑ ูู ูุฌุงู ุงูุชุฎุตุต",
            "ูุทุงู ุงูููุงุท": (50, 100),
            "ุงููุชุทูุจุงุช": "ูุนูููุงุช ุงููุชุงุจ ูุตูุฑุฉ ุงูุบูุงู",
            "ุงูุชุตููู": "ุชุฃููู"
        },
        {
            "ุงุณู ุงููููุฉ": "ุชูุฏูู ูุญุงุถุฑุฉ ุนุงูุฉ",
            "ุงููุตู": "ุชูุฏูู ูุญุงุถุฑุฉ ุนูููุฉ ุนุงูุฉ ูู ููุถูุน ูุชุฎุตุต",
            "ูุทุงู ุงูููุงุท": (10, 25),
            "ุงููุชุทูุจุงุช": "ุนููุงู ุงููุญุงุถุฑุฉ ูุชุงุฑูุฎูุง ูููุงููุง",
            "ุงูุชุตููู": "ุชุนููู"
        },
        {
            "ุงุณู ุงููููุฉ": "ุชูุฏูู ูุฑุดุฉ ุนูู",
            "ุงููุตู": "ุชูุฏูู ูุฑุดุฉ ุนูู ูุชุฎุตุตุฉ ููุทูุงุจ ุฃู ุงูุฒููุงุก",
            "ูุทุงู ุงูููุงุท": (15, 30),
            "ุงููุชุทูุจุงุช": "ูุตู ุงููุฑุดุฉ ูุงูุญุถูุฑ",
            "ุงูุชุตููู": "ุชุนููู"
        },
        {
            "ุงุณู ุงููููุฉ": "ุงููุดุงุฑูุฉ ูู ูุฌูุฉ ุนูููุฉ",
            "ุงููุตู": "ุงููุดุงุฑูุฉ ูู ูุฌูุฉ ุนูููุฉ ุนูู ูุณุชูู ุงููุณู ุฃู ุงููููุฉ",
            "ูุทุงู ุงูููุงุท": (10, 20),
            "ุงููุชุทูุจุงุช": "ุงุณู ุงููุฌูุฉ ููุฏุฉ ุงููุดุงุฑูุฉ",
            "ุงูุชุตููู": "ุฎุฏูุฉ ุฃูุงุฏูููุฉ"
        },
        {
            "ุงุณู ุงููููุฉ": "ุงูุฅุดุฑุงู ุนูู ุฑุณุงูุฉ ุนูููุฉ",
            "ุงููุตู": "ุงูุฅุดุฑุงู ุนูู ุฑุณุงูุฉ ูุงุฌุณุชูุฑ ุฃู ุฏูุชูุฑุงู",
            "ูุทุงู ุงูููุงุท": (20, 35),
            "ุงููุชุทูุจุงุช": "ูุนูููุงุช ุงูุทุงูุจ ูุนููุงู ุงูุฑุณุงูุฉ",
            "ุงูุชุตููู": "ุฅุดุฑุงู"
        },
        {
            "ุงุณู ุงููููุฉ": "ุชุทููุฑ ููุฑุฑ ุฏุฑุงุณู",
            "ุงููุตู": "ุชุทููุฑ ุฃู ุชุญุฏูุซ ููุฑุฑ ุฏุฑุงุณู",
            "ูุทุงู ุงูููุงุท": (20, 40),
            "ุงููุชุทูุจุงุช": "ุฑูุฒ ุงูููุฑุฑ ููุตู ุงูุชุทููุฑ",
            "ุงูุชุตููู": "ุชุทููุฑ"
        },
        {
            "ุงุณู ุงููููุฉ": "ูุจุงุฏุฑุฉ ุฎุฏูุฉ ูุฌุชูุนูุฉ",
            "ุงููุตู": "ุชูุฏูู ูุจุงุฏุฑุฉ ุฃู ูุดุงุท ูู ุฎุฏูุฉ ุงููุฌุชูุน",
            "ูุทุงู ุงูููุงุท": (20, 40),
            "ุงููุชุทูุจุงุช": "ูุตู ุงููุจุงุฏุฑุฉ ูุชุฃุซูุฑูุง",
            "ุงูุชุตููู": "ุฎุฏูุฉ ูุฌุชูุนูุฉ"
        },
        {
            "ุงุณู ุงููููุฉ": "ุญุถูุฑ ุฏูุฑุฉ ุชุฏุฑูุจูุฉ",
            "ุงููุตู": "ุญุถูุฑ ุฏูุฑุฉ ุชุฏุฑูุจูุฉ ูู ูุฌุงู ุงูุชุฎุตุต ุฃู ุงูุชุทููุฑ ุงููููู",
            "ูุทุงู ุงูููุงุท": (5, 15),
            "ุงููุชุทูุจุงุช": "ุดูุงุฏุฉ ุงูุญุถูุฑ ููุตู ุงูุฏูุฑุฉ",
            "ุงูุชุตููู": "ุชุทููุฑ ูููู"
        },
    ]
    return pd.DataFrame(tasks)

@st.cache_data(ttl=3600)
def calculate_faculty_achievements(achievements_df):
    """ุญุณุงุจ ุฅุฌูุงูู ุงูุฅูุฌุงุฒุงุช ูุงูููุงุท ููู ุนุถู ููุฆุฉ ุชุฏุฑูุณ"""
    # ุชุฌููุน ุงูุจูุงูุงุช ุญุณุจ ุงูุนุถู
    faculty_summaries = achievements_df.groupby("ุงูุนุถู").agg({
        "ุงูููุงุท": "sum",
        "ุงููุตู": "count",
        "ุงูุชูููู": "mean"
    }).rename(columns={
        "ุงููุตู": "ุนุฏุฏ ุงูููุงู",
        "ุงูุชูููู": "ูุชูุณุท ุงูุชูููู"
    }).reset_index()
    
    # ุฅุถุงูุฉ ุงูุจุฑูุงูุฌ ููู ุนุถู
    program_map = achievements_df.groupby("ุงูุนุถู")["ุงูุจุฑูุงูุฌ"].first().to_dict()
    faculty_summaries["ุงูุจุฑูุงูุฌ"] = faculty_summaries["ุงูุนุถู"].map(program_map)
    
    # ุชุญุฏูุฏ ุขุฎุฑ ูุดุงุท ููู ุนุถู
    latest_activity = achievements_df.sort_values("ุงูุชุงุฑูุฎ", ascending=False).groupby("ุงูุนุถู").first()["ุงูุชุงุฑูุฎ"].to_dict()
    faculty_summaries["ุขุฎุฑ ูุดุงุท"] = faculty_summaries["ุงูุนุถู"].map(latest_activity)
    
    # ุชุญุฏูุฏ ุงูููุจ ูุงูุดุงุฑุฉ ุจูุงุกู ุนูู ุฅุฌูุงูู ุงูููุงุท
    def get_badge_and_title(points):
        if points >= 300:
            return "๐", "ุงูุนุถู ุงูููุฉ", 1
        elif points >= 200:
            return "๐", "ุงูุนุถู ุงููููุฒ", 2
        elif points >= 150:
            return "๐ฅ", "ุงูุนุถู ุงููุนุงู", 3
        elif points >= 100:
            return "โจ", "ุงูุนุถู ุงููุดุท", 4
        else:
            return "๐ฑ", "ุงูุนุถู ุงููุดุงุฑู", 5
    
    # ุฅุถุงูุฉ ุงูุดุงุฑุฉ ูุงูููุจ ูุงููุณุชูู
    faculty_summaries[["ุงูุดุงุฑุฉ", "ุงูููุจ", "ุงููุณุชูู"]] = faculty_summaries.apply(
        lambda row: pd.Series(get_badge_and_title(row["ุงูููุงุท"])), axis=1
    )
    
    # ุชุฑุชูุจ ุงูุจูุงูุงุช ุญุณุจ ุงูููุงุท (ุชูุงุฒูููุง)
    faculty_summaries = faculty_summaries.sort_values("ุงูููุงุท", ascending=False)
    
    return faculty_summaries

@st.cache_data(ttl=3600)
def get_task_distribution(achievements_df):
    """ุชุญููู ุชูุฒูุน ุงูููุงู ุญุณุจ ุงูููุน"""
    task_dist = achievements_df["ููุน ุงููููุฉ"].value_counts().reset_index()
    task_dist.columns = ["ููุน ุงููููุฉ", "ุงูุนุฏุฏ"]
    return task_dist

@st.cache_data(ttl=3600)
def get_program_performance(achievements_df):
    """ุชุญููู ุฃุฏุงุก ุงูุจุฑุงูุฌ ูู ุญูุซ ุงูุฅูุฌุงุฒุงุช ูุงูููุงุท"""
    program_perf = achievements_df.groupby("ุงูุจุฑูุงูุฌ").agg({
        "ุงูููุงุท": "sum",
        "ุงููุตู": "count"
    }).rename(columns={
        "ุงููุตู": "ุนุฏุฏ ุงูููุงู"
    }).reset_index()
    
    # ุญุณุงุจ ูุชูุณุท ุงูููุงุท ููู ูููุฉ
    program_perf["ูุชูุณุท ุงูููุงุท ูููููุฉ"] = program_perf["ุงูููุงุท"] / program_perf["ุนุฏุฏ ุงูููุงู"]
    
    return program_perf

@st.cache_data(ttl=3600)
def get_monthly_activity(achievements_df):
    """ุชุญููู ุงููุดุงุท ุงูุดูุฑู ุนูู ูุฏุงุฑ ุงูุนุงู"""
    # ุชุญููู ุงูุชุงุฑูุฎ ุฅูู ููุน datetime
    achievements_df["ุชุงุฑูุฎ"] = pd.to_datetime(achievements_df["ุงูุชุงุฑูุฎ"])
    
    # ุงุณุชุฎุฑุงุฌ ุงูุดูุฑ ูุงูุณูุฉ
    achievements_df["ุงูุดูุฑ-ุงูุณูุฉ"] = achievements_df["ุชุงุฑูุฎ"].dt.strftime("%Y-%m")
    
    # ุชุฌููุน ุงูุจูุงูุงุช ุญุณุจ ุงูุดูุฑ
    monthly_activity = achievements_df.groupby("ุงูุดูุฑ-ุงูุณูุฉ").agg({
        "ุงูููุงุท": "sum",
        "ุงููุตู": "count"
    }).rename(columns={
        "ุงููุตู": "ุนุฏุฏ ุงูููุงู"
    }).reset_index()
    
    # ุชุฑุชูุจ ุงูุจูุงูุงุช ุญุณุจ ุงูุชุงุฑูุฎ
    monthly_activity["ุชุงุฑูุฎ_ููุชุฑุชูุจ"] = pd.to_datetime(monthly_activity["ุงูุดูุฑ-ุงูุณูุฉ"] + "-01")
    monthly_activity = monthly_activity.sort_values("ุชุงุฑูุฎ_ููุชุฑุชูุจ")
    
    return monthly_activity

def evaluate_task_automatically(task_name, task_description):
    """ุชูููู ุงููููุฉ ุชููุงุฆููุง ุจูุงุกู ุนูู ุงููุตู (ูููุฐุฌ ุจุณูุท)"""
    # ูู ุงููุธุงู ุงูุญููููุ ูููู ุงุณุชุฎุฏุงู ููุงุฐุฌ ุฐูุงุก ุงุตุทูุงุนู ููุชูููู
    # ููุง ูุณุชุฎุฏู ุงูุชูููู ุงูุนุดูุงุฆู ูุน ุจุนุถ ุงูููุทู ุงูุจุณูุท
    
    # ุทูู ุงููุตู ูุคุซุฑ ูู ุงูุชูููู
    length_score = min(5, max(1, len(task_description) // 20))
    
    # ูููุงุช ููุชุงุญูุฉ ุชุฒูุฏ ูู ุงูุชูููู
    keywords = ["ุฏููู", "ูุญูู", "ูุดุฑ", "ุชุทููุฑ", "ุงุจุชูุงุฑ", "ูุจุงุฏุฑุฉ", "ุชุฎุทูุท"]
    keyword_score = sum(1 for keyword in keywords if keyword in task_description) / 2
    
    # ุชูููู ุฃููู ูุนุชูุฏ ุนูู ููุน ุงููููุฉ
    initial_rating = {
        "ูุดุฑ ุจุญุซ ูู ูุฌูุฉ ูุญููุฉ": 4.5,
        "ูุดุฑ ุจุญุซ ูู ูุคุชูุฑ": 4.0,
        "ุชุฃููู ูุชุงุจ": 5.0,
        "ุชูุฏูู ูุญุงุถุฑุฉ ุนุงูุฉ": 3.5,
        "ุชูุฏูู ูุฑุดุฉ ุนูู": 3.8,
        "ุงููุดุงุฑูุฉ ูู ูุฌูุฉ ุนูููุฉ": 3.0,
        "ุงูุฅุดุฑุงู ุนูู ุฑุณุงูุฉ ุนูููุฉ": 4.2,
        "ุชุทููุฑ ููุฑุฑ ุฏุฑุงุณู": 4.0,
        "ูุจุงุฏุฑุฉ ุฎุฏูุฉ ูุฌุชูุนูุฉ": 4.3,
        "ุญุถูุฑ ุฏูุฑุฉ ุชุฏุฑูุจูุฉ": 3.0,
    }.get(task_name, 3.5)
    
    # ุงูุฌูุน ุจูู ูู ุงูุนูุงูู
    final_rating = (initial_rating * 0.6) + (length_score * 0.2) + (keyword_score * 0.2)
    
    # ุชูุฑูุจ ุงูุชูููู ุฅูู ุฃูุฑุจ 0.5
    return round(min(5, max(1, final_rating)) * 2) / 2

def calculate_points_from_rating(task_name, rating, tasks_df):
    """ุญุณุงุจ ุงูููุงุท ุจูุงุกู ุนูู ุงูุชูููู ูููุน ุงููููุฉ"""
    # ุงูุจุญุซ ุนู ูุทุงู ุงูููุงุท ูููููุฉ ุงููุญุฏุฏุฉ
    task_row = tasks_df[tasks_df["ุงุณู ุงููููุฉ"] == task_name]
    if len(task_row) > 0:
        min_points, max_points = task_row.iloc[0]["ูุทุงู ุงูููุงุท"]
    else:
        # ูุทุงู ุงูุชุฑุงุถู ุฅุฐุง ูู ูุชู ุงูุนุซูุฑ ุนูู ุงููููุฉ
        min_points, max_points = (10, 30)
    
    # ุญุณุงุจ ุงูููุงุท ุจูุงุกู ุนูู ุงูุชูููู (1-5)
    # 1 ูุฌูุฉ = ุงูุญุฏ ุงูุฃุฏููุ 5 ูุฌูู = ุงูุญุฏ ุงูุฃูุตู
    percentage = (rating - 1) / 4  # ุชุญููู ุงูุชูููู ุฅูู ูุณุจุฉ (0-1)
    points = min_points + (percentage * (max_points - min_points))
    
    return round(points)

# ---- ุงูุชุฑููุณุฉ ----
st.title("๐ ูุธุงู ุฅุฏุงุฑุฉ ุฅูุฌุงุฒ ุงูููุงู")
st.write("ููุญุฉ ุชุญููุฒูุฉ ูุฅูุฌุงุฒุงุช ุฃุนุถุงุก ููุฆุฉ ุงูุชุฏุฑูุณ ูุชุชุจุน ุงูููุงู ุงูุฃูุงุฏูููุฉ")

# ---- ุงูุชุญุถูุฑ ุงูุฃููู ----
# ุชุญููู ุงูุจูุงูุงุช
achievements_df = generate_achievements_data()
faculty_df = load_faculty_data()
tasks_df = get_available_tasks()

# ุญุณุงุจ ุงูุจูุงูุงุช ุงูููุฎุตุฉ
faculty_summaries = calculate_faculty_achievements(achievements_df)
task_distribution = get_task_distribution(achievements_df)
program_performance = get_program_performance(achievements_df)
monthly_activity = get_monthly_activity(achievements_df)

# ---- ุงูุดุฑูุท ุงูุฌุงูุจู (ุนูุงุตุฑ ุงูุชุญูู) ----
with st.sidebar:
    st.header("ุชุตููุฉ ุงูุจูุงูุงุช")
    
    # ุงุฎุชูุงุฑ ุงูุนุงู ุงูุฏุฑุงุณู
    academic_years = ["2024-2025", "2023-2024"]
    selected_year = st.selectbox("ุงูุนุงู ุงูุฏุฑุงุณู:", academic_years)
    
    # ุงุฎุชูุงุฑ ุงูุจุฑูุงูุฌ
    programs = ["ุงููู"] + list(faculty_df["ุงูุจุฑูุงูุฌ"].unique())
    selected_program = st.selectbox("ุงูุจุฑูุงูุฌ:", programs)
    
    # ุงุฎุชูุงุฑ ููุน ุงูููุงู
    task_types = ["ุงููู"] + list(achievements_df["ููุน ุงููููุฉ"].unique())
    selected_task_type = st.selectbox("ููุน ุงูููุงู:", task_types)
    
    # ุฃุฒุฑุงุฑ ุงูุฅุฌุฑุงุกุงุช
    st.divider()
    st.header("ุงูุฅุฌุฑุงุกุงุช")
    
    # ุฒุฑ ุชุณุฌูู ูููุฉ ุฌุฏูุฏุฉ ูุคุฏู ุฅูู ุงูุชูุฑูุฑ ุฅูู ุชุจููุจ ุชุณุฌูู ุงูููุงู
    if st.button("๐ ุชุณุฌูู ูููุฉ ุฌุฏูุฏุฉ", use_container_width=True):
        # ุญูุธ ุงูุฅุนุฏุงุฏ ูู ุญุงูุฉ ุงูุฌูุณุฉ ูุงุณุชุฎุฏุงูู ูุงุญููุง
        st.session_state["active_tab"] = 2  # ุงููููุฉ 2 ุชูุซู ุชุจููุจ "ุชุณุฌูู ุงูููุงู"
    
    # ุฒุฑ ุฅุฏุงุฑุฉ ุงูููุงู ุงููุชุงุญุฉ (ูููุดุฑููู)
    if st.button("โ๏ธ ุฅุฏุงุฑุฉ ุงูููุงู ุงููุชุงุญุฉ", use_container_width=True):
        st.session_state["active_tab"] = 3  # ุงููููุฉ 3 ุชูุซู ุชุจููุจ "ุฅุฏุงุฑุฉ ุงูููุงู"
    
    # ุญุงูุฉ ุชุณุฌูู ุงูุฏุฎูู (ูู ุงููุธุงู ุงููุนููุ ูุฐุง ุณูุฑุชุจุท ุจูุธุงู ุงููุตุงุฏูุฉ)
    st.divider()
    st.caption("ุชู ุชุณุฌูู ุงูุฏุฎูู ูู: ุฏ. ูุญูุฏ ุฃุญูุฏ")
    st.caption("ุงูุตูุงุญูุฉ: ุนุถู ููุฆุฉ ุชุฏุฑูุณ")

# ---- ุชุทุจูู ุงูุชุตููุฉ ----
filtered_achievements = achievements_df.copy()

# ุชุตููุฉ ุญุณุจ ุงูุจุฑูุงูุฌ
if selected_program != "ุงููู":
    filtered_achievements = filtered_achievements[filtered_achievements["ุงูุจุฑูุงูุฌ"] == selected_program]
    faculty_summaries = faculty_summaries[faculty_summaries["ุงูุจุฑูุงูุฌ"] == selected_program]

# ุชุตููุฉ ุญุณุจ ููุน ุงููููุฉ
if selected_task_type != "ุงููู":
    filtered_achievements = filtered_achievements[filtered_achievements["ููุน ุงููููุฉ"] == selected_task_type]

# ---- ุงูุชุจููุจุงุช ุงูุฑุฆูุณูุฉ ----
# ุชุนููู ุงูุชุจููุจ ุงููุดุท ุฅูุง ูู ุญุงูุฉ ุงูุฌูุณุฉ ุฃู ุงูุงูุชุฑุงุถู (0)
active_tab = st.session_state.get("active_tab", 0)

tabs = st.tabs([
    "๐ฅ ููุญุฉ ุงูุฅูุฌุงุฒุงุช", 
    "๐๏ธ ููุญุฉ ุงูุดุฑู", 
    "๐ ุชุณุฌูู ุงูููุงู", 
    "โ๏ธ ุฅุฏุงุฑุฉ ุงูููุงู"
])

# ---- ุชุจููุจ 1: ููุญุฉ ุงูุฅูุฌุงุฒุงุช ----
with tabs[0]:
    # ุชูุณูู ุงูุดุงุดุฉ ุฅูู 3 ุฃุนูุฏุฉ
    col1, col2, col3 = st.columns([1, 2, 1])
    
    # ุงูุนููุฏ ุงูุฃูู: ุงูุชุฑุชูุจ ุงูุนุงู
    with col1:
        st.subheader("๐ ุงูุชุฑุชูุจ ุงูุนุงู")
        
        # ุนุฑุถ ุงูุชุฑุชูุจ ุงูุนุงู ูุฌุฏูู ุชูุงุนูู
        st.dataframe(
            faculty_summaries[["ุงูุนุถู", "ุงูุดุงุฑุฉ", "ุงูููุงุท", "ุนุฏุฏ ุงูููุงู", "ูุชูุณุท ุงูุชูููู"]],
            hide_index=True,
            use_container_width=True,
            column_config={
                "ุงูุนุถู": st.column_config.TextColumn("ุงูุนุถู"),
                "ุงูุดุงุฑุฉ": st.column_config.TextColumn(""),
                "ุงูููุงุท": st.column_config.ProgressColumn(
                    "ุงูููุงุท",
                    min_value=0,
                    max_value=faculty_summaries["ุงูููุงุท"].max(),
                    format="%d"
                ),
                "ุนุฏุฏ ุงูููุงู": st.column_config.NumberColumn("ุงูููุงู"),
                "ูุชูุณุท ุงูุชูููู": st.column_config.NumberColumn("ุงูุชูููู", format="%.1f โญ")
            }
        )
    
    # ุงูุนููุฏ ุงูุซุงูู: ุงููุฎุทุทุงุช ุงูุจูุงููุฉ
    with col2:
        st.subheader("๐ ุฅุญุตุงุฆูุงุช ุงูุฅูุฌุงุฒุงุช")
        
        # ุชุจููุจุงุช ุฏุงุฎููุฉ ูููุฎุทุทุงุช ุงูุจูุงููุฉ
        chart_tabs = st.tabs(["ุงูุฃุนุถุงุก", "ุฃููุงุน ุงูููุงู", "ุงููุดุงุท ุงูุดูุฑู"])
        
        # ูุฎุทุท ุงูููุงุฑูุฉ ุจูู ุงูุฃุนุถุงุก
        with chart_tabs[0]:
            # ุงูุญุตูู ุนูู ุฃูุถู 10 ุฃุนุถุงุก
            top_10_faculty = faculty_summaries.head(10)
            
            # ุฑุณู ุจูุงูู ุดุฑูุทู ููููุงุฑูุฉ
            fig = px.bar(
                top_10_faculty,
                x="ุงูุนุถู",
                y="ุงูููุงุท",
                color="ุงูุจุฑูุงูุฌ",
                title="ุฃูุถู 10 ุฃุนุถุงุก ุญุณุจ ุงูููุงุท",
                text="ุงูููุงุท",
                hover_data=["ุนุฏุฏ ุงูููุงู", "ูุชูุณุท ุงูุชูููู"]
            )
            fig.update_layout(xaxis_title="ุงูุนุถู", yaxis_title="ุงูููุงุท")
            st.plotly_chart(fig, use_container_width=True)
        
        # ูุฎุทุท ุชูุฒูุน ุงูููุงู ุญุณุจ ุงูููุน
        with chart_tabs[1]:
            fig = px.pie(
                task_distribution,
                values="ุงูุนุฏุฏ",
                names="ููุน ุงููููุฉ",
                title="ุชูุฒูุน ุงูููุงู ุญุณุจ ุงูููุน",
                hole=0.4
            )
            st.plotly_chart(fig, use_container_width=True)
        
        # ูุฎุทุท ุงููุดุงุท ุงูุดูุฑู
        with chart_tabs[2]:
            fig = px.line(
                monthly_activity,
                x="ุงูุดูุฑ-ุงูุณูุฉ",
                y=["ุงูููุงุท", "ุนุฏุฏ ุงูููุงู"],
                title="ุงููุดุงุท ุงูุดูุฑู ุนูู ูุฏุงุฑ ุงูุนุงู",
                labels={"ุงูุดูุฑ-ุงูุณูุฉ": "ุงูุดูุฑ", "value": "ุงููููุฉ", "variable": "ุงููุคุดุฑ"},
                markers=True
            )
            fig.update_layout(xaxis_title="ุงูุดูุฑ", yaxis_title="ุงููููุฉ")
            st.plotly_chart(fig, use_container_width=True)
        
        # ููุงุฑูุฉ ุฃุฏุงุก ุงูุจุฑุงูุฌ
        st.subheader("๐ ุฃุฏุงุก ุงูุจุฑุงูุฌ")
        program_fig = px.bar(
            program_performance,
            x="ุงูุจุฑูุงูุฌ",
            y="ุงูููุงุท",
            color="ุนุฏุฏ ุงูููุงู",
            title="ุฅุฌูุงูู ุงูููุงุท ุญุณุจ ุงูุจุฑูุงูุฌ",
            text="ุงูููุงุท",
            hover_data=["ูุชูุณุท ุงูููุงุท ูููููุฉ"]
        )
        program_fig.update_layout(xaxis_title="ุงูุจุฑูุงูุฌ", yaxis_title="ุฅุฌูุงูู ุงูููุงุท")
        st.plotly_chart(program_fig, use_container_width=True)
    
    # ุงูุนููุฏ ุงูุซุงูุซ: ุขุฎุฑ ุงูุฅูุฌุงุฒุงุช
    with col3:
        st.subheader("๐ ุขุฎุฑ ุงูุฅูุฌุงุฒุงุช")
        
        # ุนุฑุถ ุขุฎุฑ 8 ุฅูุฌุงุฒุงุช
        latest_achievements = filtered_achievements.head(8)
        
        for _, achievement in latest_achievements.iterrows():
            # ุชุญููู ุงูุชุงุฑูุฎ ุฅูู ุตูุบุฉ ุฃูุซุฑ ูุถูุญูุง
            date_obj = datetime.strptime(achievement["ุงูุชุงุฑูุฎ"], "%Y-%m-%d")
            friendly_date = date_obj.strftime("%d %b %Y")
            
            # ุนุฑุถ ุจุทุงูุฉ ุงูุฅูุฌุงุฒ
            st.markdown(f"""
            <div class="achievement-card">
                <h4>{achievement["ุงูุนุถู"]}</h4>
                <p><strong>{achievement["ููุน ุงููููุฉ"]}</strong> ({achievement["ุงูููุงุท"]} ููุทุฉ)</p>
                <p>{achievement["ุงููุตู"]}</p>
                <p><small>{friendly_date} | โญ {achievement["ุงูุชูููู"]}</small></p>
            </div>
            """, unsafe_allow_html=True)

# ---- ุชุจููุจ 2: ููุญุฉ ุงูุดุฑู ----
with tabs[1]:
    st.header("๐๏ธ ููุญุฉ ุงูุดุฑู")
    st.write("ุชูุฑูู ูุฃุนุถุงุก ููุฆุฉ ุงูุชุฏุฑูุณ ุงููุชููุฒูู ููููุง ููุณุชูู ุงูุฅูุฌุงุฒ")
    
    # ุชูุณูู ุงูุฃุนุถุงุก ุญุณุจ ุงููุณุชูู
    level_1 = faculty_summaries[faculty_summaries["ุงููุณุชูู"] == 1]
    level_2 = faculty_summaries[faculty_summaries["ุงููุณุชูู"] == 2]
    level_3 = faculty_summaries[faculty_summaries["ุงููุณุชูู"] == 3]
    level_4 = faculty_summaries[faculty_summaries["ุงููุณุชูู"] == 4]
    level_5 = faculty_summaries[faculty_summaries["ุงููุณุชูู"] == 5]
    
    # ุนุฑุถ ูู ูุณุชูู ูู ูุณู ูููุตู
    if not level_1.empty:
        st.subheader("๐ ุงูุนุถู ุงูููุฉ")
        
        # ุชูุณูู ุฅูู ุฃุนูุฏุฉ ูุนุฑุถ ุงูุจุทุงูุงุช
        level_1_cols = st.columns(min(3, len(level_1)))
        
        for i, (_, member) in enumerate(level_1.iterrows()):
            with level_1_cols[i % len(level_1_cols)]:
                # ุงูุญุตูู ุนูู ุขุฎุฑ 3 ุฅูุฌุงุฒุงุช ููุนุถู
                member_achievements = achievements_df[achievements_df["ุงูุนุถู"] == member["ุงูุนุถู"]].head(3)
                
                # ุจูุงุก ูุงุฆูุฉ ุงูุฅูุฌุงุฒุงุช
                achievements_list = ""
                for _, achievement in member_achievements.iterrows():
                    achievements_list += f"โข {achievement['ููุน ุงููููุฉ']}: {achievement['ุงููุตู'][:50]}...\n"
                
                st.markdown(f"""
                <div class="top-faculty-card level-1">
                    <h3>{member["ุงูุดุงุฑุฉ"]} {member["ุงูุนุถู"]}</h3>
                    <p><strong>ุงูููุจ: {member["ุงูููุจ"]}</strong></p>
                    <p>ุงูุจุฑูุงูุฌ: {member["ุงูุจุฑูุงูุฌ"]}</p>
                    <p>ุงูููุงุท: {member["ุงูููุงุท"]}</p>
                    <p>ุนุฏุฏ ุงูููุงู: {member["ุนุฏุฏ ุงูููุงู"]}</p>
                    <p>ุงูุชูููู: {"โญ" * round(member["ูุชูุณุท ุงูุชูููู"])}</p>
                    <hr>
                    <p><strong>ุฃุจุฑุฒ ุงูุฅูุฌุงุฒุงุช:</strong></p>
                    <p style="white-space: pre-line;">{achievements_list}</p>
                </div>
                """, unsafe_allow_html=True)
    
    if not level_2.empty:
        st.subheader("๐ ุงูุฃุนุถุงุก ุงููููุฒูู")
        
        # ุชูุณูู ุฅูู ุฃุนูุฏุฉ ูุนุฑุถ ุงูุจุทุงูุงุช
        level_2_cols = st.columns(min(3, len(level_2)))
        
        for i, (_, member) in enumerate(level_2.iterrows()):
            with level_2_cols[i % len(level_2_cols)]:
                st.markdown(f"""
                <div class="top-faculty-card level-2">
                    <h3>{member["ุงูุดุงุฑุฉ"]} {member["ุงูุนุถู"]}</h3>
                    <p><strong>ุงูููุจ: {member["ุงูููุจ"]}</strong></p>
                    <p>ุงูุจุฑูุงูุฌ: {member["ุงูุจุฑูุงูุฌ"]}</p>
                    <p>ุงูููุงุท: {member["ุงูููุงุท"]}</p>
                    <p>ุนุฏุฏ ุงูููุงู: {member["ุนุฏุฏ ุงูููุงู"]}</p>
                    <p>ุงูุชูููู: {"โญ" * round(member["ูุชูุณุท ุงูุชูููู"])}</p>
                </div>
                """, unsafe_allow_html=True)
    
    # ุตู ุฃููู ูููุณุชููุงุช ุงูุฃุฎุฑู
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if not level_3.empty:
            st.subheader("๐ฅ ุงูุฃุนุถุงุก ุงููุนุงููู")
            for _, member in level_3.iterrows():
                st.markdown(f"""
                <div class="top-faculty-card level-3">
                    <h4>{member["ุงูุดุงุฑุฉ"]} {member["ุงูุนุถู"]}</h4>
                    <p>ุงูููุจ: {member["ุงูููุจ"]}</p>
                    <p>ุงูููุงุท: {member["ุงูููุงุท"]}</p>
                </div>
                """, unsafe_allow_html=True)
    
    with col2:
        if not level_4.empty:
            st.subheader("โจ ุงูุฃุนุถุงุก ุงููุดุทูู")
            for _, member in level_4.iterrows()[:3]:  # ูุนุฑุถ ุฃูู 3 ููุท ูุชูููุฑ ุงููุณุงุญุฉ
                st.markdown(f"""
                <div class="top-faculty-card level-4">
                    <h4>{member["ุงูุดุงุฑุฉ"]} {member["ุงูุนุถู"]}</h4>
                    <p>ุงูููุจ: {member["ุงูููุจ"]}</p>
                    <p>ุงูููุงุท: {member["ุงูููุงุท"]}</p>
                </div>
                """, unsafe_allow_html=True)
    
    with col3:
        if not level_5.empty:
            st.subheader("๐ฑ ุงูุฃุนุถุงุก ุงููุดุงุฑููู")
            for _, member in level_5.iterrows()[:3]:  # ูุนุฑุถ ุฃูู 3 ููุท ูุชูููุฑ ุงููุณุงุญุฉ
                st.markdown(f"""
                <div class="top-faculty-card level-5">
                    <h4>{member["ุงูุดุงุฑุฉ"]} {member["ุงูุนุถู"]}</h4>
                    <p>ุงูููุจ: {member["ุงูููุจ"]}</p>
                    <p>ุงูููุงุท: {member["ุงูููุงุท"]}</p>
                </div>
                """, unsafe_allow_html=True)

# ---- ุชุจููุจ 3: ุชุณุฌูู ุงูููุงู ----
with tabs[2]:
    st.header("๐ ุชุณุฌูู ูููุฉ ุฌุฏูุฏุฉ")
    st.write("ุงุณุชุฎุฏู ุงููููุฐุฌ ุฃุฏูุงู ูุชุณุฌูู ูููุฉ ุฌุฏูุฏุฉ ููุช ุจุฅูุฌุงุฒูุง.")
    
    # ุชูุณูู ุงูุดุงุดุฉ ุฅูู ุนููุฏูู
    col1, col2 = st.columns([2, 1])
    
    with col1:
        # ูููุฐุฌ ุฅุถุงูุฉ ูููุฉ
        with st.form("task_submission_form"):
            # ุงุฎุชูุงุฑ ููุน ุงููููุฉ
            task_options = tasks_df["ุงุณู ุงููููุฉ"].tolist()
            selected_task = st.selectbox("ุงุฎุชุฑ ููุน ุงููููุฉ:", task_options)
            
            # ุงูุญุตูู ุนูู ุงููุชุทูุจุงุช ูุงููุตู ูููููุฉ ุงููุฎุชุงุฑุฉ
            task_info = tasks_df[tasks_df["ุงุณู ุงููููุฉ"] == selected_task].iloc[0]
            st.info(f"**ูุตู ุงููููุฉ:** {task_info['ุงููุตู']}\n\n**ุงููุชุทูุจุงุช:** {task_info['ุงููุชุทูุจุงุช']}")
            
            # ุชูุงุตูู ุงููููุฉ
            task_description = st.text_area("ูุตู ุงูุฅูุฌุงุฒ:", height=120, 
                placeholder="ุงุฏุฎู ูุตูุงู ุชูุตูููุงู ูููููุฉ ุงูุชู ููุช ุจูุง...")
            
            # ุฑูุงุจุท ุฅุถุงููุฉ
            additional_links = st.text_input("ุฑูุงุจุท ุฅุถุงููุฉ (ุงุฎุชูุงุฑู):", 
                placeholder="ุฃุฏุฎู ุฑูุงุจุท ุฐุงุช ุตูุฉ ุจุงููููุฉ...")
            
            # ุชุญููู ูููุงุช (ุณูุชู ุชุนุทููู ูู ูุฐุง ุงููููุฐุฌ)
            file_upload = st.file_uploader("ุฅุฑูุงู ูููุงุช ุฏุงุนูุฉ (ุงุฎุชูุงุฑู):", type=["pdf", "jpg", "png", "docx"])
            
            # ุชุงุฑูุฎ ุงูุฅูุฌุงุฒ
            # ุงุณุชุฎุฏุงู ุงูุชุงุฑูุฎ ุงูุญุงูู ููููุฉ ุงูุชุฑุงุถูุฉ
            submission_date = st.date_input("ุชุงุฑูุฎ ุงูุฅูุฌุงุฒ:", datetime.now())
            
            # ุฒุฑ ุงูุฅุฑุณุงู
            submitted = st.form_submit_button("ุชูุฏูู ุงููููุฉ")
            
            if submitted:
                if not task_description:
                    st.error("ูุฑุฌู ุฅุฏุฎุงู ูุตู ููุฅูุฌุงุฒ.")
                else:
                    # ุชูููู ุงููููุฉ ุชููุงุฆููุง
                    rating = evaluate_task_automatically(selected_task, task_description)
                    points = calculate_points_from_rating(selected_task, rating, tasks_df)
                    
                    # ุนุฑุถ ูุชูุฌุฉ ุงูุชูููู
                    st.success(f"ุชู ุชูุฏูู ุงููููุฉ ุจูุฌุงุญ! ุงูุชูููู: {rating}/5 | ุงูููุงุท: {points}")
                    
                    # ุนุฑุถ ุงูุชูุงุตูู
                    st.json({
                        "ุงููููุฉ": selected_task,
                        "ุงูุชูููู": rating,
                        "ุงูููุงุท": points,
                        "ุงูุชุงุฑูุฎ": submission_date.strftime("%Y-%m-%d")
                    })
    
    with col2:
        # ูุนูููุงุช ุนู ูุธุงู ุงูุชูููู ูุงูููุงุท
        st.subheader("๐ ูุนูููุงุช ุงูุชูููู")
        st.markdown("""
        **ูุธุงู ุงูุชูููู:**
        
        ูุชู ุชูููู ุงูููุงู ุชููุงุฆููุง ุจูุงุกู ุนูู ุงููุตู ุงูููุฏู ูููุน ุงููููุฉ. ุงูุนูุงูู ุงูุชู ุชุคุซุฑ ูู ุงูุชูููู:
        
        - ููุน ุงููููุฉ ููุณุชูู ุงูุตุนูุจุฉ
        - ุฌูุฏุฉ ุงููุตู ูุชูุงุตููู
        - ุงููุณุชูุฏุงุช ูุงูุฑูุงุจุท ุงูุฏุงุนูุฉ
        - ุงูุชุฃุซูุฑ ุงูุฃูุงุฏููู ููุฅูุฌุงุฒ
        
        **ูุทุงูุงุช ุงูููุงุท:**
        
        - ูุดุฑ ุจุญุซ: 30-50 ููุทุฉ
        - ุชุฃููู ูุชุงุจ: 50-100 ููุทุฉ
        - ุชูุฏูู ูุญุงุถุฑุฉ: 10-25 ููุทุฉ
        - ุงููุดุงุฑูุฉ ูู ูุฌูุฉ: 10-20 ููุทุฉ
        - ุชุทููุฑ ููุฑุฑ: 20-40 ููุทุฉ
        
        **ุงูุฃููุงุจ ูุงููุณุชููุงุช:**
        
        - ๐ ุงูุนุถู ุงูููุฉ: 300+ ููุทุฉ
        - ๐ ุงูุนุถู ุงููููุฒ: 200-299 ููุทุฉ
        - ๐ฅ ุงูุนุถู ุงููุนุงู: 150-199 ููุทุฉ
        - โจ ุงูุนุถู ุงููุดุท: 100-149 ููุทุฉ
        - ๐ฑ ุงูุนุถู ุงููุดุงุฑู: 0-99 ููุทุฉ
        """)
        
        # ุนุฑุถ ุงูููุงู ุงูููุฏูุฉ ุณุงุจููุง
        st.subheader("๐ ููุงูู ุงูุณุงุจูุฉ")
        
        # ููุชุฑุถ ุฃู "ุฏ. ูุญูุฏ ุฃุญูุฏ" ูู ุงููุณุชุฎุฏู ุงูุญุงูู
        current_user = "ุฏ. ูุญูุฏ ุฃุญูุฏ"
        user_achievements = achievements_df[achievements_df["ุงูุนุถู"] == current_user].head(5)
        
        if len(user_achievements) > 0:
            for _, achievement in user_achievements.iterrows():
                st.markdown(f"""
                <div class="task-container">
                    <strong>{achievement["ููุน ุงููููุฉ"]}</strong> <small>({achievement["ุงูุชุงุฑูุฎ"]})</small>
                    <p>{achievement["ุงููุตู"]}</p>
                    <div>โญ {achievement["ุงูุชูููู"]} | {achievement["ุงูููุงุท"]} ููุทุฉ</div>
                </div>
                """, unsafe_allow_html=True)
        else:
            st.info("ูุง ุชูุฌุฏ ููุงู ุณุงุจูุฉ ูุนุฑุถูุง.")

# ---- ุชุจููุจ 4: ุฅุฏุงุฑุฉ ุงูููุงู ุงููุชุงุญุฉ (ูููุดุฑููู) ----
with tabs[3]:
    st.header("โ๏ธ ุฅุฏุงุฑุฉ ุงูููุงู ุงููุชุงุญุฉ")
    st.write("ูููู ูููุดุฑููู ุฅุถุงูุฉ ูุชุนุฏูู ุงูููุงู ุงููุชุงุญุฉ ููุฃุนุถุงุก ูู ููุง.")
    
    # ุชูุณูู ุงูุดุงุดุฉ ุฅูู ุนููุฏูู
    col1, col2 = st.columns([3, 2])
    
    with col1:
        st.subheader("ูุงุฆูุฉ ุงูููุงู ุงูุญุงููุฉ")
        
        # ุนุฑุถ ุงูููุงู ุงููุชุงุญุฉ ูุฌุฏูู ุชูุงุนูู
        edited_tasks = st.data_editor(
            tasks_df,
            hide_index=True,
            use_container_width=True,
            num_rows="dynamic"
        )
        
        if st.button("ุญูุธ ุงูุชุบููุฑุงุช"):
            st.success("ุชู ุญูุธ ุงูุชุบููุฑุงุช ุนูู ุงูููุงู ุจูุฌุงุญ!")
    
    with col2:
        st.subheader("ุฅุถุงูุฉ ูููุฉ ุฌุฏูุฏุฉ")
        
        # ูููุฐุฌ ุฅุถุงูุฉ ูููุฉ ุฌุฏูุฏุฉ
        with st.form("add_new_task_form"):
            task_name = st.text_input("ุงุณู ุงููููุฉ:", placeholder="ุฃุฏุฎู ุงุณู ุงููููุฉ...")
            task_desc = st.text_area("ูุตู ุงููููุฉ:", placeholder="ุฃุฏุฎู ูุตูุงู ูููููุฉ...")
            
            # ุงุณุชุฎุฏุงู ุนููุฏูู ูููุฒูุฏ ูู ุงูุนูุงุตุฑ
            point_col1, point_col2 = st.columns(2)
            with point_col1:
                min_points = st.number_input("ุงูุญุฏ ุงูุฃุฏูู ููููุงุท:", min_value=5, max_value=100, value=10)
            with point_col2:
                max_points = st.number_input("ุงูุญุฏ ุงูุฃูุตู ููููุงุท:", min_value=5, max_value=100, value=30)
            
            task_requirements = st.text_area("ูุชุทูุจุงุช ุงููููุฉ:", placeholder="ุฃุฏุฎู ูุชุทูุจุงุช ุฅุชูุงู ุงููููุฉ...")
            
            # ูุงุฆูุฉ ุงูุชุตูููุงุช
            categories = ["ุจุญุซ ุนููู", "ุชุฃููู", "ุชุนููู", "ุฎุฏูุฉ ุฃูุงุฏูููุฉ", "ุฅุดุฑุงู", "ุชุทููุฑ", "ุฎุฏูุฉ ูุฌุชูุนูุฉ", "ุชุทููุฑ ูููู"]
            task_category = st.selectbox("ุชุตููู ุงููููุฉ:", categories)
            
            # ุฒุฑ ุงูุฅุฑุณุงู
            submitted = st.form_submit_button("ุฅุถุงูุฉ ุงููููุฉ")
            
            if submitted:
                if not task_name or not task_desc or not task_requirements:
                    st.error("ูุฑุฌู ููุก ุฌููุน ุงูุญููู ุงููุทููุจุฉ.")
                elif min_points >= max_points:
                    st.error("ูุฌุจ ุฃู ูููู ุงูุญุฏ ุงูุฃุฏูู ููููุงุท ุฃูู ูู ุงูุญุฏ ุงูุฃูุตู.")
                else:
                    st.success(f"ุชูุช ุฅุถุงูุฉ ุงููููุฉ '{task_name}' ุจูุฌุงุญ!")
        
        # ูุตุงุฆุญ ูููุดุฑููู
        with st.expander("ูุตุงุฆุญ ูุฅุฏุงุฑุฉ ุงูููุงู"):
            st.markdown("""
            **ุฅุฑุดุงุฏุงุช ูุฅูุดุงุก ููุงู ูุนุงูุฉ:**
            
            1. **ูุถูุญ ุงููุฏู**: ุญุฏุฏ ุจูุถูุญ ูุง ูู ุงููุทููุจ ูู ุงูุนุถู.
            2. **ุชุญุฏูุฏ ุงููุชุทูุจุงุช**: ุงุฐูุฑ ุจุงูุชูุตูู ุงููุณุชูุฏุงุช ุงููุทููุจุฉ ููุฅุซุจุงุช.
            3. **ุชุนููู ููุงุท ูุชูุงุฒูุฉ**: ุงุถุจุท ุงูููุงุท ุจูุง ูุชูุงุณุจ ูุน ุฌูุฏ ุงููููุฉ ูุฃูููุชูุง.
            4. **ุงูุชุตููู ุงูููุงุณุจ**: ุตูู ุงูููุงู ุจุดูู ุตุญูุญ ูุชุณููู ุงูุจุญุซ ูุงูุชุตููุฉ.
            5. **ูุฑุงุฌุนุฉ ุฏูุฑูุฉ**: ูู ุจุชุญุฏูุซ ูุงุฆูุฉ ุงูููุงู ุฏูุฑููุง ูุฅุจูุงุฆูุง ุฐุงุช ุตูุฉ.
            """)
